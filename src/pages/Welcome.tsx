import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { 
  Leaf, 
  Trophy, 
  Users, 
  BookOpen, 
  Target,
  Zap,
  Award,
  Play,
  ArrowRight
} from "lucide-react";
import heroImage from "@/assets/hero-education.jpg";

export default function Welcome() {
  const [isLogin, setIsLogin] = useState(true);
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    email: "",
    password: "",
    name: "",
    role: "student"
  });

  // currentUser state driven from localStorage so UI updates immediately on login/signup
  const [currentUser, setCurrentUser] = useState<any | null>(() => {
    try {
      const raw = localStorage.getItem("user");
      return raw ? JSON.parse(raw) : null;
    } catch { return null; }
  });

  const loggedIn = Boolean(localStorage.getItem("token") && currentUser);

  useEffect(() => {
    // keep currentUser in sync with localStorage changes (if any)
    const onStorage = () => {
      try {
        const raw = localStorage.getItem("user");
        setCurrentUser(raw ? JSON.parse(raw) : null);
      } catch { setCurrentUser(null); }
    };
    window.addEventListener("storage", onStorage);
    return () => window.removeEventListener("storage", onStorage);
  }, []);

  const getApiBase = () => {
    try { if ((import.meta as any)?.env?.VITE_AUTH_URL) return (import.meta as any).env.VITE_AUTH_URL; } catch {}
    try { if (typeof process !== "undefined" && (process as any).env && (process as any).env.REACT_APP_AUTH_URL) return (process as any).env.REACT_APP_AUTH_URL; } catch {}
    return "http://localhost:5000";
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const base = getApiBase();
    const url = isLogin ? `${base}/api/auth/login` : `${base}/api/auth/register`;

    try {
      const res = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          name: formData.name,
          email: formData.email,
          password: formData.password,
          role: formData.role
        })
      });

      const json = await res.json().catch(() => ({}));
      if (!res.ok) {
        const msg = json?.error || json?.message || `Request failed (${res.status})`;
        alert(msg);
        return;
      }

      if (json.token) localStorage.setItem("token", json.token);
      if (json.user) {
        try { localStorage.setItem("user", JSON.stringify(json.user)); } catch {}
        setCurrentUser(json.user);
      }

      // don't auto-navigate; show user card and Dashboard button
      // navigate("/dashboard"); // removed to let user see the small card on welcome
    } catch (err: any) {
      console.error("Auth request failed:", err);
      alert("Request failed. Is the auth server running?");
    }
  };

  const handleStartLearning = () => {
    if (!loggedIn) {
      alert("Please sign in to access the dashboard.");
      return;
    }
    navigate("/dashboard");
  };

  const handleLogout = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("user");
    setCurrentUser(null);
  };

  // features: show AI-Powered Quizzes to everyone, require login on click
  const features: Array<{ icon: any; title: string; description: string; href?: string }> = [
    {
      icon: <BookOpen className="h-6 w-6 text-primary" />,
      title: "AI-Powered Quizzes",
      description: "Dynamic environmental quizzes generated by advanced AI",
      href: "/ai-quiz"
    },
    {
      icon: <Trophy className="h-6 w-6 text-eco-points" />,
      title: "Learn",
      description: "Learn environmental things. Read or Listen by assistant",
      href: "/learn"
    },
    {
      icon: <Target className="h-6 w-6 text-success" />,
      title: "Real Tasks",
      description: "Complete real-world environmental challenges",
      href: "/real-tasks"
    },
    {
      icon: <Users className="h-6 w-6 text-accent-foreground" />,
      title: "Leaderboard",
      description: "Compete with classmates and schools worldwide",
      href:"/leaderboard"
    }
  ];

  const handleFeatureClick = (href?: string) => {
    if (!href) return;
    // require login for certain features
    const protectedPaths = ["/ai-quiz", "/leaderboard", "/learn", "/real-tasks"];
    if (!loggedIn && protectedPaths.includes(href)) {
      // bring up sign-in form instead of navigating
      setIsLogin(true);
      const feature = features.find(f => f.href === href);
      alert(`Please sign in to access ${feature?.title ?? href}`);
      return;
    }
    navigate(href);
  };

  const userCard = currentUser ? (
    <Card className="w-full max-w-md shadow-eco bg-background/95 backdrop-blur-sm border-primary/10">
      <CardHeader className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <div className="h-12 w-12 rounded-full bg-eco-points/20 flex items-center justify-center text-xl font-semibold">
            {String(currentUser.name ?? currentUser.email ?? "U").charAt(0).toUpperCase()}
          </div>
          <div>
            <div className="font-medium">{currentUser.name ?? currentUser.email}</div>
            <div className="text-xs text-muted-foreground">
              {Number(currentUser.quizzesCompleted ?? 0)} quizzes â€¢ {Number(currentUser.streakDays ?? 0)} day streak
            </div>
          </div>
        </div>
        <div className="flex flex-col items-end">
          <Button size="sm" variant="eco" onClick={() => navigate("/dashboard")}>Dashboard</Button>
          <Button size="sm" variant="ghost" onClick={handleLogout}>Logout</Button>
        </div>
      </CardHeader>
      <CardContent>
        <p className="text-sm text-muted-foreground">Keep learning to increase your eco-points and climb the leaderboard.</p>
      </CardContent>
    </Card>
  ) : null;

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-primary/5 relative overflow-hidden">
      {/* Background Hero Image */}
      <div className="absolute inset-0 z-0">
        <img 
          src={heroImage} 
          alt="Environmental education classroom" 
          className="w-full h-full object-cover opacity-5"
        />
        <div className="absolute inset-0 bg-gradient-to-br from-background/95 via-background/90 to-primary/10" />
      </div>
      {/* Header */}
      <header className="container mx-auto px-4 py-6 relative z-10">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <div className="flex h-10 w-10 items-center justify-center rounded-xl bg-gradient-eco shadow-glow">
              <Leaf className="h-6 w-6 text-white" />
            </div>
            <span className="text-2xl font-bold bg-gradient-eco bg-clip-text text-transparent">
              EcoMon 
            </span>
          </div>
          <div className="flex items-center space-x-2">
            <Badge variant="secondary" className="bg-eco-points/10 text-black">
              <Zap className="mr-1 h-3 w-3" />
              AI-Powered
            </Badge>
            {/* only show Dashboard nav button when logged in */}
            {loggedIn && (
              <Button size="sm" variant="outline" onClick={() => navigate("/dashboard")}>Dashboard</Button>
            )}
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-1 relative z-10">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
          {/* Left Side - Hero Content */}
          <div className="space-y-8">
            <div className="space-y-4">
              <Badge variant="secondary" className="bg-gradient-eco/10 text-primary border-primary/20">
                ðŸŒ± Gamified Environmental Education
              </Badge>
              <h1 className="text-4xl md:text-5xl font-bold leading-tight">
                Learn About Our
                <span className="bg-gradient-eco bg-clip-text text-transparent"> Planet </span>
                Through Play
              </h1>
              <p className="text-lg text-muted-foreground max-w-lg">
                Join thousands of students worldwide in an interactive journey to become 
                environmental champions through AI-powered quizzes and real-world challenges.
              </p>
            </div>

            {/* Features Grid */}
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              {features.map((feature, index) => (
                <div
                  key={index}
                  className={`flex items-start space-x-3 p-4 bg-card rounded-lg shadow-card border ${feature.href ? "cursor-pointer hover:shadow-lg" : ""}`}
                  onClick={() => handleFeatureClick(feature.href)}
                >
                  <div className="flex-shrink-0">{feature.icon}</div>
                  <div>
                    <h3 className="font-semibold text-sm">{feature.title}</h3>
                    <p className="text-xs text-muted-foreground">{feature.description}</p>
                  </div>
                </div>
              ))}
            </div>

            <div className="flex flex-col sm:flex-row justify-center ">
              <Button size="lg" variant="eco" className="flex-1 shadow-eco" onClick={handleStartLearning}>
                Go to Dashboard
              </Button>
            </div>
          </div>

          {/* Right Side - Auth Form or User Card */}
          <div className="flex justify-center">
            {!loggedIn ? (
              <Card className="w-full max-w-md shadow-eco bg-background/95 backdrop-blur-sm border-primary/10">
                <CardHeader className="text-center">
                  <CardTitle className="text-2xl">
                    {isLogin ? "Welcome Back!" : "Join EcoLearn"}
                  </CardTitle>
                  <p className="text-sm text-muted-foreground">
                    {isLogin 
                      ? "Sign in to continue your eco-learning journey" 
                      : "Start your environmental education adventure"
                    }
                  </p>
                </CardHeader>
                <CardContent>
                  <form onSubmit={handleSubmit} className="space-y-4">
                    {!isLogin && (
                      <>
                        <div className="space-y-2">
                          <label className="text-sm font-medium">Full Name</label>
                          <Input
                            type="text"
                            placeholder="Enter your name"
                            value={formData.name}
                            onChange={(e) => setFormData({...formData, name: e.target.value})}
                            required
                          />
                        </div>
                        <div className="space-y-2">
                          <label htmlFor="role" className="text-sm font-medium">Role</label>
                          <select
                            id="role"
                            aria-label="Role"
                            className="w-full p-2 border rounded-md bg-background"
                            value={formData.role}
                            onChange={(e) => setFormData({...formData, role: e.target.value})}
                          >
                            <option value="student">Student</option>
                            <option value="teacher">Teacher</option>
                          </select>
                        </div>
                      </>
                    )}
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Email</label>
                      <Input
                        type="email"
                        placeholder="Enter your email"
                        value={formData.email}
                        onChange={(e) => setFormData({...formData, email: e.target.value})}
                        required
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Password</label>
                      <Input
                        type="password"
                        placeholder="Enter your password"
                        value={formData.password}
                        onChange={(e) => setFormData({...formData, password: e.target.value})}
                        required
                      />
                    </div>

                    <Button type="submit" className="w-full" variant="eco">
                      {isLogin ? "Sign In" : "Create Account"}
                    </Button>
                  </form>

                  <div className="mt-6 text-center">
                    <p className="text-sm text-muted-foreground">
                      {isLogin ? "Don't have an account? " : "Already have an account? "}
                      <button
                        type="button"
                        onClick={() => setIsLogin(!isLogin)}
                        className="text-primary hover:underline font-medium"
                      >
                        {isLogin ? "Sign up" : "Sign in"}
                      </button>
                    </p>
                  </div>
                </CardContent>
              </Card>
            ) : (
              userCard
            )}
          </div>
        </div>
      </div>
    </div>
  );
}